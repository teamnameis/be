// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: be.proto

package main

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Flame struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Flame) Reset()         { *m = Flame{} }
func (m *Flame) String() string { return proto.CompactTextString(m) }
func (*Flame) ProtoMessage()    {}
func (*Flame) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbad8e6386660096, []int{0}
}
func (m *Flame) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Flame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Flame.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Flame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Flame.Merge(m, src)
}
func (m *Flame) XXX_Size() int {
	return m.Size()
}
func (m *Flame) XXX_DiscardUnknown() {
	xxx_messageInfo_Flame.DiscardUnknown(m)
}

var xxx_messageInfo_Flame proto.InternalMessageInfo

func (m *Flame) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Flame)(nil), "be.Flame")
}

func init() { proto.RegisterFile("be.proto", fileDescriptor_dbad8e6386660096) }

var fileDescriptor_dbad8e6386660096 = []byte{
	// 148 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x48, 0x4a, 0xd5, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4a, 0x4a, 0x55, 0x92, 0xe6, 0x62, 0x75, 0xcb, 0x49, 0xcc,
	0x4d, 0x15, 0x12, 0xe2, 0x62, 0x49, 0x49, 0x2c, 0x49, 0x94, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x09,
	0x02, 0xb3, 0x8d, 0x74, 0xb9, 0xd8, 0xfd, 0xcb, 0x52, 0x8b, 0x72, 0x12, 0x2b, 0x85, 0x94, 0xb8,
	0x58, 0x82, 0x53, 0xf3, 0x52, 0x84, 0x38, 0xf5, 0x92, 0x52, 0xf5, 0xc0, 0x3a, 0xa4, 0x10, 0x4c,
	0x25, 0x06, 0x0d, 0x46, 0x03, 0x46, 0x27, 0xbd, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63,
	0x7c, 0xf0, 0x48, 0x8e, 0x91, 0x4b, 0x30, 0xbf, 0x28, 0x5d, 0xaf, 0x24, 0x35, 0x31, 0x37, 0x2f,
	0x31, 0x37, 0x35, 0xb3, 0x58, 0x2f, 0x29, 0xd5, 0x09, 0x66, 0x5a, 0x00, 0x63, 0x14, 0x53, 0x52,
	0x6a, 0x12, 0x1b, 0xd8, 0x19, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xdf, 0x26, 0xcc, 0x2c,
	0x92, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OverlayClient is the client API for Overlay service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OverlayClient interface {
	Send(ctx context.Context, opts ...grpc.CallOption) (Overlay_SendClient, error)
}

type overlayClient struct {
	cc *grpc.ClientConn
}

func NewOverlayClient(cc *grpc.ClientConn) OverlayClient {
	return &overlayClient{cc}
}

func (c *overlayClient) Send(ctx context.Context, opts ...grpc.CallOption) (Overlay_SendClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Overlay_serviceDesc.Streams[0], "/be.Overlay/Send", opts...)
	if err != nil {
		return nil, err
	}
	x := &overlaySendClient{stream}
	return x, nil
}

type Overlay_SendClient interface {
	Send(*Flame) error
	Recv() (*Flame, error)
	grpc.ClientStream
}

type overlaySendClient struct {
	grpc.ClientStream
}

func (x *overlaySendClient) Send(m *Flame) error {
	return x.ClientStream.SendMsg(m)
}

func (x *overlaySendClient) Recv() (*Flame, error) {
	m := new(Flame)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OverlayServer is the server API for Overlay service.
type OverlayServer interface {
	Send(Overlay_SendServer) error
}

// UnimplementedOverlayServer can be embedded to have forward compatible implementations.
type UnimplementedOverlayServer struct {
}

func (*UnimplementedOverlayServer) Send(srv Overlay_SendServer) error {
	return status.Errorf(codes.Unimplemented, "method Send not implemented")
}

func RegisterOverlayServer(s *grpc.Server, srv OverlayServer) {
	s.RegisterService(&_Overlay_serviceDesc, srv)
}

func _Overlay_Send_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OverlayServer).Send(&overlaySendServer{stream})
}

type Overlay_SendServer interface {
	Send(*Flame) error
	Recv() (*Flame, error)
	grpc.ServerStream
}

type overlaySendServer struct {
	grpc.ServerStream
}

func (x *overlaySendServer) Send(m *Flame) error {
	return x.ServerStream.SendMsg(m)
}

func (x *overlaySendServer) Recv() (*Flame, error) {
	m := new(Flame)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Overlay_serviceDesc = grpc.ServiceDesc{
	ServiceName: "be.Overlay",
	HandlerType: (*OverlayServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Send",
			Handler:       _Overlay_Send_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "be.proto",
}

func (m *Flame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Flame) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Flame) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintBe(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBe(dAtA []byte, offset int, v uint64) int {
	offset -= sovBe(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Flame) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovBe(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBe(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBe(x uint64) (n int) {
	return sovBe(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Flame) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Flame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Flame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBe
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBe
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBe(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBe
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBe
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBe
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBe
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBe
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBe
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBe        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBe          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBe = fmt.Errorf("proto: unexpected end of group")
)
